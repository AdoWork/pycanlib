# Tox (http://tox.testrun.org/) is a tool for running tests
# in multiple virtualenvs. This configuration file will run the
# test suite on all supported python versions. To use it, "pip install tox"
# and then run "tox" from this directory.

# DLL is taken from KVDLLPATH
# You can override path for each env using KVDLLPATH_XX.
# E.g. if python36 is 64 bit, set KVDLLPATH_36=%PYLIB_ROOT%\dll64

# Usages:
# tox -e  # Run tests on all supported Python versions
# tox -e py310 -- --kvprobe  # Run tests using Python 3.10 adding --kvprobe as an argument
# tox -e docs  # Create documentation under .tox\docs\build\html\index.html
# tox -e flake8  # Run linters
# tox -e "clean,py37,report"  # Create coverage report under .\htmlcov\index.html
# tox --listenvs-all  # list all available environments

[flake8]
# E501 line too long (164 > 99 characters)
# F401 '.remotedevice.ConnectionTestResult' imported but unused
# F403 'from .constants import *' used; unable to detect undefined names
# W503 line break before binary operator
per-file-ignores =
    __init__.py:F401, F403
ignore =
    E501,
    W503,
rst-directives =
    deprecated,
    versionadded,
    versionchanged,
    py:attribute,
extend-ignore =
    # Google Python style is not RST until after processed by Napoleon
    # See https://github.com/peterjc/flake8-rst-docstrings/issues/17
    RST201,RST203,RST301,

[tox]
envlist = py36, py37, py38, py39, py310
requires = pip >= 21.0.0

[testenv:docs]
description = invoke sphinx-build to build the HTML docs
basepython = python
setenv =
    # Do not load canlib dll during import of the canlib package
    READTHEDOCS = 'True'
deps =
    sphinx
    sphinx_rtd_theme
commands =
    sphinx-build -d "{envdir}/build/doctree" docs "{envdir}/build/html" -W -bhtml {posargs}
    sphinx-build -d "{envdir}/build/doctree" docs "{envdir}/build/text" -W -btext {posargs}
    python -c 'import pathlib; print("documentation available under file://\{0\}".format(pathlib.Path(r"{envdir}") / "build" / "html" / "index.html"))'

[testenv:flake8]
basepython = python
skip_install = true
deps =
    flake8
    flake8-bugbear
    flake8-rst-docstrings
    # flake8-docstrings>=1.3.1
    # flake8-typing-imports>=1.1
    # pep8-naming
commands =
    flake8 canlib tests

[testenv:jenkins]
setenv =
    KVDLLPATH = {env:WORKSPACE:}/pycanlib/src/dll32/kvlibsdk_so/lib}
    LD_LIBRARY_PATH = {env:KVDLLPATH:}
    KV_JENKINS_USER = '1'

[testenv:build]
basepython = python
deps =
    build
commands =
    python -m build --sdist --wheel

[coverage:run]
# This is a workaround to catch all canlib modules installed in virtualenv
source =
    canlib.canlib
    canlib.deprecation
    canlib.device
    canlib.dllLoader
    canlib.ean
    canlib.exceptions
    canlib.frame
    canlib.futureapi
    canlib.j1939
    canlib.kvDevice
    canlib.kvMemoConfig
    canlib.kvMessage
    canlib.kvaMemoLibXml
    canlib.kvadblib
    canlib.kvamemolibxml
    canlib.kvlclib
    canlib.kvmlib
    canlib.kvrlib
    canlib.linlib
    tests
# Since we use --cov=. to catch all, we must remove unwanted cruft here.
# There should really be a better way of just specifying installed canlib + tests path...
omit =
    ./canlib/*
    */_pytest/*
    */site-packages/co*
    */site-packages/_*
    */site-packages/a*
    */site-packages/d*
    */site-packages/i*
    */site-packages/n*
    */site-packages/p*
    */site-packages/s*
    */site-packages/t*
    */site-packages/z*
    ./setup.py

[coverage:report]
show_missing = false
precision = 1


[testenv]
basepython =
    py36: python3.6
    py37: python3.7
    py38: python3.8
    py39: python3.9
    py310: python3.10
setenv =
    py{36,37,38,39,310}: COVERAGE_FILE = .coverage.{envname}
    py36: KVDLLPATH = {env:KVDLLPATH_36:{env:KVDLLPATH:}}
    py37: KVDLLPATH = {env:KVDLLPATH_37:{env:KVDLLPATH:}}
    py38: KVDLLPATH = {env:KVDLLPATH_38:{env:KVDLLPATH:}}
    py39: KVDLLPATH = {env:KVDLLPATH_39:{env:KVDLLPATH:}}
    py310: KVDLLPATH = {env:KVDLLPATH_310:{env:KVDLLPATH:}}
commands = pytest --basetemp="{envtmpdir}" --junitxml={envlogdir}/junit-{envname}.xml --cov=. --cov-report= {posargs}
deps =
    pandas
    pydantic
    pytest
    pytest-randomly
    coverage
    pytest-cov
passenv = PYLIB_ROOT KVDLLPATH KV_JENKINS_USER

# Since we collect coverage in seperate files, we need to combine them before
# creating the reports, includes html report in directory htmlcov
[testenv:report]
basepython = python
deps =
    coverage
skip_install = true
commands =
    coverage combine
    coverage report
    coverage html

# Clean up all seperate coverage files, used at start e.g. tox -e "clean,py37,report"
[testenv:clean]
basepython = python
deps = coverage
skip_install = true
commands = coverage erase
